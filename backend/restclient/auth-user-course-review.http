@TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ZDViZWE2Yi1jNjY5LTQzZTgtYmViYi00NTA5NTA0MTMzMTMiLCJlbWFpbCI6ImtpbXV0YWlicmlhbjkyMkBnbWFpbC5jb20iLCJyb2xlIjoiSU5TVFJVQ1RPUiIsImlhdCI6MTc1MTcxNjE3MywiZXhwIjoxNzUxODAyNTczfQ.TmnRfERlPMABnbydLIWyydnh50vq3qR4FUr0WEqx5Hw
@USER_ID=
@INSTRUCTOR_ID=
@COURSE_ID=
@REVIEW_ID=
@instructorUserId=
@courseId=

### Check email availability
POST http://localhost:3000/auth/check-email
Content-Type: application/json

{
  "email": "testuser@example.com"
}

### Register a new user
POST http://localhost:3000/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "testuser@example.com",
  "password": "password123",
  "role": "STUDENT"
}

### Login
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "testuser@example.com",
  "password": "password123"
}

### Get current user profile 
POST http://localhost:3000/auth/me
Authorization: Bearer {{TOKEN}}


### Create a user (Admin only)
POST http://localhost:3000/users
Authorization: Bearer {{TOKEN}}
Content-Type: application/json

{
  "name": "Another User",
  "email": "another@example.com",
  "password": "password456",
  "role": "INSTRUCTOR"
}

### Get all users (Admin only)
GET http://localhost:3000/users
Authorization: Bearer {{TOKEN}}

### Get user by ID (Admin only)
GET http://localhost:3000/users/{{USER_ID}}
Authorization: Bearer {{TOKEN}}

### Update user (Admin only)
PATCH http://localhost:3000/users/{{USER_ID}}
Authorization: Bearer {{TOKEN}}
Content-Type: application/json

{
  "name": "Updated Name"
}

### Delete user (Admin only)
DELETE http://localhost:3000/users/{{USER_ID}}
Authorization: Bearer {{TOKEN}}


### Admin Login
# @name adminLogin
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

@adminToken = {{adminLogin.response.body.access_token}}

###

# Create a course (no instructorId required)
POST http://localhost:3000/courses
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "title": "My New Course",
  "description": "A great course",
  "objectives": ["Learn X", "Do Y"],
  "prerequisites": ["Basic Z"],
  "level": "BEGINNER",
  "category": "PROGRAMMING",
  "isPublished": false
}

###

# Assign an instructor to a course (admin only)
PUT http://localhost:3000/courses/{{courseId}}/assign-instructor
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "instructorId": "{{instructorUserId}}"
}

###

### Get all courses
GET http://localhost:3000/courses
Authorization: Bearer {{TOKEN}}

### Get course by ID
GET http://localhost:3000/courses/{{COURSE_ID}}
Authorization: Bearer {{TOKEN}}

### Update course (Admin or Instructor)
PATCH http://localhost:3000/courses/{{COURSE_ID}}
Authorization: Bearer {{TOKEN}}
Content-Type: application/json

{
  "title": "Updated Course Title"
}

### Delete course (Admin or Instructor)
DELETE http://localhost:3000/courses/{{COURSE_ID}}
Authorization: Bearer {{TOKEN}}


### Create a review
POST http://localhost:3000/reviews
Authorization: Bearer {{TOKEN}}
Content-Type: application/json

{
  "rating": 5,
  "comment": "Great course!",
  "userId": "{{USER_ID}}",
  "courseId": "{{COURSE_ID}}"
}

### Get all reviews
GET http://localhost:3000/reviews
Authorization: Bearer {{TOKEN}}

### Get review by ID
GET http://localhost:3000/reviews/{{REVIEW_ID}}
Authorization: Bearer {{TOKEN}}

### Update review
PATCH http://localhost:3000/reviews/{{REVIEW_ID}}
Authorization: Bearer {{TOKEN}}
Content-Type: application/json

{
  "comment": "Updated review comment."
}

### Delete review
DELETE http://localhost:3000/reviews/{{REVIEW_ID}}
Authorization: Bearer {{TOKEN}} 